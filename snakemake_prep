#Work on 06/16 and 06/20
#installed dependencies:
#Python ≥3.5
#Snakemake ≥5.24.1
#BWA 0.7
#SAMtools 1.9
#Pysam 0.15
#BCFtools 1.9
#Graphviz 2.42
#Jinja2 2.11
#NetworkX 2.5
#Matplotlib 3.3

#some basic operating commands
#generate snake output
$ snakemake --cores 1 {output}
#with a specified snake file
snakemake --cores 1 --snakefile {filename} {output}
#to update anything in the linux, copy file by 
$ cp -r /mnt/c/Users/zwang/wzyBest/practice_codes/Snakemake/Snakefile ~/snakemake-tutorial
#edit a file content
$ nano file
#use ctrl o to store and ctrl x to exit
#creat an empty file or update timestamp
$ touch filename
#show the content
$ cat





#set up the environment
#Windows Subsystem for Linux: If you use Windows 10, you can set up the Windows Subsystem for Linux (WSL) to natively run linux applications. Install the WSL following the instructions in the WSL Documentation. You can chose any Linux distribution available for the WSL, but the most popular and accessible one is Ubuntu. Start the WSL and set up your account; now, you can follow the steps of our tutorial from within your Linux environment in the WSL.

#Step 1: Installing Mambaforge
#First, please open a terminal or make sure you are logged into your Vagrant Linux VM. Assuming that you have a 64-bit system, on Linux, download and install Miniconda 3 with

$ curl -L https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-x86_64.sh -o Mambaforge-Linux-x86_64.sh
$ bash Mambaforge-Linux-x86_64.sh

#Step 2: Preparing a working directory
#First, create a new directory snakemake-tutorial at a place you can easily remember and change into that directory in your terminal:

$ mkdir snakemake-tutorial
$ cd snakemake-tutorial

#First, we download some example data on which the workflow shall be executed:

$ curl -L https://api.github.com/repos/snakemake/snakemake-tutorial-data/tarball -o snakemake-tutorial-data.tar.gz
#Next we extract the data. On Linux, run

$ tar --wildcards -xf snakemake-tutorial-data.tar.gz --strip 1 "*/data" "*/environment.yaml"
#This will create a folder data and a file environment.yaml in the working directory.

#Step 3: Creating an environment with the required software

$ conda install -n base -c conda-forge mamba

#Make sure to activate the conda base environment with

$ conda activate base
#The environment.yaml file that you have obtained with the previous step (Step 2) can be used to install all required software into an isolated Conda environment with the name snakemake-tutorial via

$ mamba env create --name snakemake-tutorial --file environment.yaml
If you don’t have the Mamba command because you used a different conda distribution than Mambaforge, you can also first install Mamba (which is a faster and more robust replacement for Conda) in your base environment with

#Step 4: Activating the environment
#To activate the snakemake-tutorial environment, execute

$ conda activate snakemake-tutorial
$ snakemake --help

#Now do actual operations in snakemake
#Step 1: Mapping reads
#Our first Snakemake rule maps reads of a given sample to a given reference genome (see Background). For this, we will use the tool bwa, specifically the subcommand bwa mem. In the working directory, create a new file called Snakefile with an editor of your choice. We propose to use the Atom editor, since it provides out-of-the-box syntax highlighting for Snakemake. In the Snakefile, define the following rule:

rule bwa_map:
    input:
        "data/genome.fa",
        "data/samples/A.fastq"
    output:
        "mapped_reads/A.bam"
    shell:
        "bwa mem {input} | samtools view -Sb - > {output}"

#A Snakemake rule has a name (here bwa_map) and a number of directives, here input, output and shell. 
#The input and output directives are followed by lists of files that are expected to be used or created by the rule. 
#The shell directive is followed by a Python string containing the shell command to execute.
#Here, we refer to the output file by specifying {output} and to the input files by specifying {input}. 
#Since the rule has multiple input files, Snakemake will concatenate them, separated by a whitespace. 
#In other words, Snakemake will replace {input} with data/genome.fa data/samples/A.fastq before executing the command. 
#The shell command invokes bwa mem with reference genome and reads, and pipes the output into samtools which creates a compressed BAM file containing the alignments.
#The output of samtools is redirected into the output file defined by the rule with >.
$ snakemake -np mapped_reads/A.bam    
#or
$ snakemake --cores 1 mapped_reads/A.bam

#note for some useful tips here: 
$ -p: print shell commands
$ -n: only show steps, don't run
$ -F: force running all steps
$ -j: run multiple jobs in parallel(discuss later)
#if you have multiple snakefiles, how to run? example.
#if you have a snakefile and a my_snakefile.smk, run my_snakefile.smk with the following line
$ snakemake --cores 1 --snakefile my_snakefile.smk mapped_reads/A.bam


